/* eslint-disable */
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type Addr = string;
export interface Relayer {
  coreum_address: Addr;
  xrpl_address: string;
  xrpl_pub_key: string;
}
export type Uint128 = string;
export interface InstantiateMsg {
  bridge_xrpl_address: string;
  evidence_threshold: number;
  owner: Addr;
  relayers: Relayer[];
  trust_set_limit_amount: Uint128;
  used_ticket_sequence_threshold: number;
  xrpl_base_fee: number;
}
export type OperationResult = {
  tickets_allocation: {
    tickets?: number[] | null;
  };
};
export type Uint64 = string;
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type TransactionResult = 'accepted' | 'rejected' | 'invalid';
export type TokenState = 'enabled' | 'disabled' | 'processing' | 'inactive';
export type Evidence =
  | {
      xrpl_to_coreum_transfer: {
        amount: Uint128;
        currency: string;
        issuer: string;
        recipient: Addr;
        tx_hash: string;
      };
    }
  | {
      xrpl_transaction_result: {
        account_sequence?: number | null;
        operation_result?: OperationResult | null;
        ticket_sequence?: number | null;
        transaction_result: TransactionResult;
        tx_hash?: string | null;
      };
    };
export type ExecuteMsg =
  | {
      register_coreum_token: {
        bridging_fee: Uint128;
        decimals: number;
        denom: string;
        max_holding_amount: Uint128;
        sending_precision: number;
      };
    }
  | {
      register_xrpl_token: {
        bridging_fee: Uint128;
        currency: string;
        issuer: string;
        max_holding_amount: Uint128;
        sending_precision: number;
      };
    }
  | {
      recover_tickets: {
        account_sequence: number;
        number_of_tickets?: number | null;
      };
    }
  | {
      recover_xrpl_token_registration: {
        currency: string;
        issuer: string;
      };
    }
  | {
      save_signature: {
        operation_id: number;
        operation_version: number;
        signature: string;
      };
    }
  | {
      save_evidence: {
        evidence: Evidence;
      };
    }
  | {
      send_to_xrpl: {
        deliver_amount?: Uint128 | null;
        recipient: string;
      };
    }
  | {
      update_xrpl_token: {
        bridging_fee?: Uint128 | null;
        currency: string;
        issuer: string;
        max_holding_amount?: Uint128 | null;
        sending_precision?: number | null;
        state?: TokenState | null;
      };
    }
  | {
      update_coreum_token: {
        bridging_fee?: Uint128 | null;
        denom: string;
        max_holding_amount?: Uint128 | null;
        sending_precision?: number | null;
        state?: TokenState | null;
      };
    }
  | {
      update_xrpl_base_fee: {
        xrpl_base_fee: number;
      };
    }
  | {
      claim_refund: {
        pending_refund_id: string;
      };
    }
  | {
      claim_relayer_fees: {
        amounts: Coin[];
      };
    }
  | {
      halt_bridge: object;
    }
  | {
      resume_bridge: object;
    }
  | {
      rotate_keys: {
        new_evidence_threshold: number;
        new_relayers: Relayer[];
      };
    }
  | {
      update_ownership: Action;
    };

export type Action =
  | {
      transfer_ownership: {
        expiry?: Expiration | null;
        new_owner: string;
      };
    }
  | 'accept_ownership'
  | 'renounce_ownership';
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: object;
    };
export type Timestamp = Uint64;

export type QueryMsg =
  | {
      config: object;
    }
  | {
      xrpl_tokens: {
        limit?: number | null;
        start_after_key?: string | null;
      };
    }
  | {
      coreum_tokens: {
        limit?: number | null;
        start_after_key?: string | null;
      };
    }
  | {
      pending_operations: {
        limit?: number | null;
        start_after_key?: number | null;
      };
    }
  | {
      available_tickets: object;
    }
  | {
      fees_collected: {
        relayer_address: Addr;
      };
    }
  | {
      pending_refunds: {
        address: Addr;
        limit?: number | null;
        start_after_key?: [Addr, string] | null;
      };
    }
  | {
      bridge_state: object;
    }
  | {
      transaction_evidence: {
        hash: string;
      };
    }
  | {
      transaction_evidences: {
        limit?: number | null;
        start_after_key?: string | null;
      };
    }
  | {
      ownership: object;
    };
export interface AvailableTicketsResponse {
  tickets: number[];
}
export type BridgeState = 'active' | 'halted';
export interface BridgeStateResponse {
  state: BridgeState;
}
export interface Config {
  bridge_state: BridgeState;
  bridge_xrpl_address: string;
  evidence_threshold: number;
  relayers: Relayer[];
  trust_set_limit_amount: Uint128;
  used_ticket_sequence_threshold: number;
  xrpl_base_fee: number;
}
export interface CoreumTokensResponse {
  last_key?: string | null;
  tokens: CoreumToken[];
}
export interface CoreumToken {
  bridging_fee: Uint128;
  decimals: number;
  denom: string;
  max_holding_amount: Uint128;
  sending_precision: number;
  state: TokenState;
  xrpl_currency: string;
}
export interface FeesCollectedResponse {
  fees_collected: Coin[];
}
export interface OwnershipForString {
  owner?: string | null;
  pending_expiry?: Expiration | null;
  pending_owner?: string | null;
}
export type OperationType =
  | {
      allocate_tickets: {
        number: number;
      };
    }
  | {
      trust_set: {
        currency: string;
        issuer: string;
        trust_set_limit_amount: Uint128;
      };
    }
  | {
      rotate_keys: {
        new_evidence_threshold: number;
        new_relayers: Relayer[];
      };
    }
  | {
      coreum_to_xrpl_transfer: {
        amount: Uint128;
        currency: string;
        issuer: string;
        max_amount?: Uint128 | null;
        recipient: string;
        sender: Addr;
      };
    };
export interface PendingOperationsResponse {
  last_key?: number | null;
  operations: Operation[];
}
export interface Operation {
  account_sequence?: number | null;
  id: string;
  operation_type: OperationType;
  signatures: Signature[];
  ticket_sequence?: number | null;
  version: number;
  xrpl_base_fee: number;
}
export interface Signature {
  relayer_coreum_address: Addr;
  signature: string;
}
export interface PendingRefundsResponse {
  last_key?: [Addr, string] | null;
  pending_refunds: PendingRefund[];
}
export interface PendingRefund {
  coin: Coin;
  id: string;
  xrpl_tx_hash?: string | null;
}
export interface TransactionEvidence {
  hash: string;
  relayer_addresses: Addr[];
}
export interface TransactionEvidencesResponse {
  last_key?: string | null;
  transaction_evidences: TransactionEvidence[];
}
export interface XRPLTokensResponse {
  last_key?: string | null;
  tokens: XRPLToken[];
}
export interface XRPLToken {
  bridging_fee: Uint128;
  coreum_denom: string;
  currency: string;
  issuer: string;
  max_holding_amount: Uint128;
  sending_precision: number;
  state: TokenState;
}
